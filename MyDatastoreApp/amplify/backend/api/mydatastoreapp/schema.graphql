# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Blog @model {
  id: ID!
  name: String!
  posts: [Post] @hasMany
}

type Post @model {
  id: ID! @primaryKey(sortKeyFields: ["title"])
  title: String!
  blog: Blog @belongsTo
  comments: [Comment] @hasMany
}

type Comment @model {
  post: Post @belongsTo
  title: String! @primaryKey(sortKeyFields: ["content","likes"])
  content: String!
  likes: Int!
  description: String
}


type ModelCompositeMultiplePk @model {
  id: ID! @primaryKey(sortKeyFields: ["location", "name"])
  location: String!
  name: String!
  lastName: String
  age: Int
}


# has-one connected with default field
type BlogWithDefaultHasOne @model {
  title: String
  owner: User @hasOne
}

# has-one connected with a custom field
type BlogWithCustomHasOne @model {
  title: String
  ownerRefId: ID
  owner: User @hasOne(fields: ["ownerRefId"])
  desc: String
}

type User @model {
  name: String
}


# 1.2 Has one - unidirectional
type Project11 @model {
  id: ID! @primaryKey(sortKeyFields: ["name"])
  name: String!
  team: Team11 @hasOne
  desc: String
}

type Team11 @model {
  id: ID! @primaryKey(sortKeyFields: ["name"])
  name: String!
  desc: String
}


# 1.2 Has one - bidirectional
type Project12 @model {
  id: ID! @primaryKey(sortKeyFields: ["name"])
  name: String!
  team: Team12 @hasOne
  desc: String
}

type Team12 @model {
  id: ID! @primaryKey(sortKeyFields: ["name"])
  name: String!
  project: Project12 @belongsTo
  desc: String
}

# 2.1 hasMany - unidirectional
type Post21 @model {
  id: ID! @primaryKey(sortKeyFields: ["title"])
  title: String!
  comments: [Comment21] @hasMany
  desc: String
}

type Comment21 @model {
  id: ID! @primaryKey(sortKeyFields: ["content"])
  content: String!
  desc: String
}

# 2.2 hasMany - bidirectional
type Post22 @model {
  id: ID! @primaryKey(sortKeyFields: ["title"])
  title: String!
  comments: [Comment22] @hasMany
  desc: String
}

type Comment22 @model {
  id: ID! @primaryKey(sortKeyFields: ["content"])
  content: String!
  post: Post22 @belongsTo
  desc: String
}

# 3.1 manyToMany
type Post31 @model {
 id: ID!
 title: String!
 content: String
 tags: [Tag31] @manyToMany(relationName: "PostTags31")
 desc: String
}

type Tag31 @model {
 id: ID! @primaryKey(sortKeyFields: ["label"])
 label: String!
 posts: [Post31] @manyToMany(relationName: "PostTags31")
 desc: String
}


type Post35 @model {
   postId: ID! @primaryKey(sortKeyFields:["title"])
   title: String!
   comments: [Comment35] @hasMany(indexName: "byPost", fields:["postId"])
}
type Comment35 @model {
   commentId: ID! @primaryKey 
   postTitle: String!
   postId: ID! @index(name: "byPost")
   post: Post35 @belongsTo(fields:["postId", "postTitle"])
}


